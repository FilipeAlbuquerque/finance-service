plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // Google Guava para cache e utilitários
    implementation 'com.google.guava:guava:32.1.2-jre'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    // Documentação API
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

    // PostgreSQL dependency
    runtimeOnly 'org.postgresql:postgresql'

    // H2 for tests
    testRuntimeOnly 'com.h2database:h2'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.35.0'
    testImplementation 'org.awaitility:awaitility:4.2.0'
}

tasks.named('test') {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.10"  // Versão mais recente do JaCoCo
}

jacocoTestReport {
    dependsOn test  // Garante que o relatório seja gerado após os testes
    reports {
        xml.required = true    // Relatório em XML (útil para integração com ferramentas CI/CD)
        html.required = true   // Relatório HTML legível
        csv.required = false
    }
}

tasks.jacocoTestCoverageVerification {
    dependsOn jacocoTestReport  // Garante que a verificação de cobertura aconteça após o relatório
    violationRules {
        rule {
            limit {
                minimum = 0.40  // Define cobertura mínima de 80%
            }
        }
    }
}

tasks.check {
    dependsOn tasks.jacocoTestCoverageVerification  // Falha o build se a cobertura mínima não for atingida
}